// // 1.	–ü–∞—Ä–Ω—ñ—Å—Ç—å —á–∏—Å–ª–∞
// // –Ø–∫ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —â–æ —á–∏—Å–ª–æ –ø–∞—Ä–Ω–µ?
// function parne(n: number) {
//     return n % 2 === 0;
// }

// console.log(parne(2));
// console.log(parne(3));

// // 2.	–†–µ–≤–µ—Ä—Å —Ä—è–¥–∫–∞

// // –ù–∞–ø–∏—à–∏ –∞–ª–≥–æ—Ä–∏—Ç–º, —è–∫–∏–π –ø–µ—Ä–µ–≤–µ—Ä—Ç–∞—î —Ä—è–¥–æ–∫ "hello" ‚Üí "olleh".
// const str = 'olleh';
// console.log(str.split('').reverse().join(''));

// // 3.	–ü–∞–ª—ñ–Ω–¥—Ä–æ–º
// // –Ø–∫ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ —î —Å–ª–æ–≤–æ –ø–∞–ª—ñ–Ω–¥—Ä–æ–º–æ–º? (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "level" ‚Üí —Ç–∞–∫, "hello" ‚Üí –Ω—ñ).
// const palindrom = 'revel';
// const pal = palindrom.split('').reverse().join('');
// if (palindrom === pal) {
//     console.log('–¢–∞–∫');
// } else {
//     console.log('–ù—ñ');
// }

// // 4.	–§–∞–∫—Ç–æ—Ä—ñ–∞–ª
// // –ó–Ω–∞–π–¥–∏ —Ñ–∞–∫—Ç–æ—Ä—ñ–∞–ª —á–∏—Å–ª–∞ (5! = 5√ó4√ó3√ó2√ó1).
// function factorial(n: number) {
//     let summery = 1;
//     for (let i = 1; i <= n; i++) {
//         summery *= i;
//     }
//     return summery;
// }
// console.log(factorial(5));

// // 5.	–§—ñ–±–æ–Ω–∞—á—á—ñ
// // –ó–≥–µ–Ω–µ—Ä—É–π –ø–µ—Ä—à—ñ 10 —á–∏—Å–µ–ª —Ä—è–¥—É –§—ñ–±–æ–Ω–∞—á—á—ñ.

// // 6.	–£–Ω—ñ–∫–∞–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏
// // –ü–µ—Ä–µ–≤—ñ—Ä, —á–∏ –≤ —Ä—è–¥–∫—É –≤—Å—ñ —Å–∏–º–≤–æ–ª–∏ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "abc" ‚Üí true, "aba" ‚Üí false).

// // 7.	–ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –≥–æ–ª–æ—Å–Ω–∏—Ö
// // –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ —Ä–∞—Ö—É—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ–ª–æ—Å–Ω–∏—Ö —É —Ä—è–¥–∫—É "automation" ‚Üí 5.

// // 8.	–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–µ —á–∏—Å–ª–æ –≤ –º–∞—Å–∏–≤—ñ
// // –ó–Ω–∞–π–¥–∏ –Ω–∞–π–±—ñ–ª—å—à–µ —á–∏—Å–ª–æ –≤ –º–∞—Å–∏–≤—ñ [1, 5, 7, 2, 10, 3].
// const ar = [1, 5, 7, 2, 10, 3];
// console.log(
//     ar
//         .sort((a, b) => a - b)
//         .reverse()
//         .shift(),
// );

// // 9.	–°—É–º–∞ —á–∏—Å–µ–ª —É –º–∞—Å–∏–≤—ñ
// // –û–±—á–∏—Å–ª–∏ —Å—É–º—É –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ [2, 4, 6, 8].
// const arr = [2, 4, 6, 8];
// const result = arr.reduce((sum, current) => sum + current, 0);
// console.log(result);

// // 10.	FizzBuzz
// // –í–∏–≤–µ–¥–∏ —á–∏—Å–ª–∞ –≤—ñ–¥ 1 –¥–æ 20, –∞–ª–µ:
// // ‚Äì –∑–∞–º—ñ—Å—Ç—å —á–∏—Å–µ–ª, –∫—Ä–∞—Ç–Ω–∏—Ö 3, –¥—Ä—É–∫—É–π "Fizz"
// // ‚Äì –∑–∞–º—ñ—Å—Ç—å –∫—Ä–∞—Ç–Ω–∏—Ö 5 ‚Üí "Buzz"
// // ‚Äì –∫—Ä–∞—Ç–Ω—ñ —ñ 3, —ñ 5 ‚Üí "FizzBuzz".
// // ________________________________________
// // üü° –°–µ—Ä–µ–¥–Ω—ñ–π / —Å–∫–ª–∞–¥–Ω—ñ—à–∏–π —Ä—ñ–≤–µ–Ω—å (11‚Äì20)
// // 11.	–ê–Ω–∞–≥—Ä–∞–º–∞
// // –ü–µ—Ä–µ–≤—ñ—Ä, —á–∏ —î –¥–≤–∞ —Ä—è–¥–∫–∏ –∞–Ω–∞–≥—Ä–∞–º–∞–º–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "listen" —ñ "silent").
// // 12.	–†–µ–≤–µ—Ä—Å —Å–ª—ñ–≤ —É —Ä–µ—á–µ–Ω–Ω—ñ
// // "QA Automation is cool" ‚Üí "cool is Automation QA".
// // 13.	Longest word
// // –ó–Ω–∞–π–¥–∏ –Ω–∞–π–¥–æ–≤—à–µ —Å–ª–æ–≤–æ –≤ —Ä–µ—á–µ–Ω–Ω—ñ "I love automation testing".
// // 14.	Remove duplicates
// // –í–∏–¥–∞–ª–∏ –¥—É–±–ª—ñ–∫–∞—Ç–∏ –∑ –º–∞—Å–∏–≤—É [1, 2, 2, 3, 4, 4, 5] ‚Üí [1,2,3,4,5].
// // 15.	Second max number
// // –ó–Ω–∞–π–¥–∏ –¥—Ä—É–≥–µ –∑–∞ –≤–µ–ª–∏—á–∏–Ω–æ—é —á–∏—Å–ª–æ –≤ –º–∞—Å–∏–≤—ñ [7, 2, 10, 8] ‚Üí 8.
// // 16.	Balanced brackets
// // –ü–µ—Ä–µ–≤—ñ—Ä, —á–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–æ–∑—Å—Ç–∞–≤–ª–µ–Ω—ñ –¥—É–∂–∫–∏:
// // ‚Ä¢	"({[]})" ‚Üí true
// // ‚Ä¢	"({[})" ‚Üí false.
// // 17.	Rotate array
// // –ó—Å—É–Ω—å –º–∞—Å–∏–≤ –Ω–∞ 2 –≤–ø—Ä–∞–≤–æ: [1,2,3,4,5] ‚Üí [4,5,1,2,3].
// // 18.	Count words
// // –ü–æ—Ä–∞—Ö—É–π –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ª—ñ–≤ —É —Ä—è–¥–∫—É "Test automation is fun" ‚Üí 4.
// // 19.	Flatten array
// // "–†–æ–∑–≥–æ—Ä–Ω–∏" –º–∞—Å–∏–≤: [1, [2, 3], [4, [5]]] ‚Üí [1,2,3,4,5].
// // 20.	Find missing number
// // –í –º–∞—Å–∏–≤—ñ [1, 2, 3, 5, 6] –∑–Ω–∞–π–¥–∏ –ø—Ä–æ–ø—É—â–µ–Ω–µ —á–∏—Å–ª–æ ‚Üí 4.
